#question 1
#Find customer who have never ordered.
SELECT name FROM users 
WHERE user_id NOT IN (SELECT user_id FROM orders);

#question 2
# Average Price / Dish .
SELECT  f.f_name ,f.f_id , round(AVG(m.price),2) AS Avg_price 
FROM food f 
JOIN menu m 
ON f.f_id = m.f_id 
GROUP BY f_name , f.f_id;

#question 3
#Find top restaurant in terms of number of orders for a given months.(MAY)
SELECT o.r_id ,r.r_name ,  COUNT(*) as total_orders , MONTHNAME(date) as month
FROM orders o  
JOIN  restaurants r
ON o.r_id = r.r_id 
WHERE MONTHNAME(date) ="May"
GROUP BY r.r_id 
ORDER BY total_orders DESC LIMIT 1 ;


#question 4 
#Restaurant with monthly_sales greater than 500 for "June" month

WITH temp_table AS
(
  SELECT r.r_id, r.r_name , sum(o.amount) monthly_sales
  FROM restaurants r 
  JOIN orders o 
  ON o.r_id = r.r_id 
  WHERE MONTHNAME(date) = "June"
  GROUP BY r.r_id
 )
   SELECT * FROM temp_table 
   WHERE monthly_sales>500 
   ORDER BY monthly_sales DESC;
  
 #question 5
 #Show all order with order details for a particular customer(Ankit) in a particular date range 2022-06-10 - 2022-07-10

SELECT r.r_id, r.r_name , o.order_id ,f_name
 FROM orders o 
  JOIN  restaurants r 
 ON r.r_id = o.r_id  
  JOIN order_details d 
 ON o.order_id = d.order_id
  JOIN food f 
 ON f.f_id = d.f_id
WHERE o.user_id =( SELECT user_id FROM users WHERE name ="Ankit") 
AND(date > '2022-06-10' AND date < '2022-07-10')


#question 6
#Find restaurants with maximum repeated customers;

SELECT r.r_name , count(*) AS 'loyal_customers' 
FROM
(
SELECT  r_id, user_id , count(*) AS 'visits' 
FROM orders 
GROUP BY r_id, user_id 
HAVING visits>1
) t 
  JOIN restaurants r 
  ON r.r_id = t.r_id
  GROUP BY  t.r_id
  ORDER BY loyal_customers 
  DESC LIMIT 1;

#question 7 
# Month over month revenue growth of swiggy
SELECT month, round(((revenue-previous)/previous)*100,2) as MOM_rev_growth
FROM
(
WITH sales AS
(
SELECT  monthname(date) as 'month' ,sum(amount) AS revenue
FROM orders 
GROUP BY month
ORDER BY month(date)
)
SELECT month,revenue ,LAG(revenue,1) 
OVER(order by revenue) AS previous 
FROM sales
) t;


#question 8
#Customer and its favourite food 

WITH temp AS
(
SELECT o.user_id,od.f_id, COUNT(*) as 'frequency'
FROM orders o JOIN order_details od 
ON o.order_id = od.order_id
GROUP BY o.user_id ,od.f_id
)
  SELECT u.name, f.f_name,t1.frequency from temp t1
  JOIN users u 
  ON u.user_id = t1.user_id
  JOIN food f 
  ON f.f_id = t1.f_id
  WHERE t1.frequency =(select max(frequency) 
  FROM temp t2
  WHERE t2.user_id = t1.user_id);
  
